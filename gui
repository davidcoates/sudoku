#!/usr/bin/env python3

import argparse
import pyperclip

from abc import ABC, abstractmethod
from enum import Enum
import tkinter as tk
from tkinter import scrolledtext
from sudoku import *

MARGIN = 20  # Pixels around the board
SIDE = 80  # Width of every board cell.
WIDTH = HEIGHT = MARGIN * 2 + SIDE * 9  # Width and height of the whole board

REPORT_WIDTH=500
REPORT_HEIGHT=1000

BACKGROUND_COLOR = "white smoke"
INLAY_COLOR = "floral white"
HEADER_COLOR = "linen"
BORDER_COLOR = "black"
BUTTON_COLOR = "white"
CURSOR_COLOR = "red"
LABEL_FONT = ("Courier New", 10)

class LineRender():

    class Style(Enum):
        THERMOMETER = 0
        SIMPLE = 1

    def __init__(self, path, style, color):
        self.path = path
        self.style = style
        self.color = color

    @staticmethod
    def pending_thermometer(cell):
        return LineRender([cell], LineRender.Style.THERMOMETER, "dark grey")

    @staticmethod
    def thermometer(path):
        return LineRender(path, LineRender.Style.THERMOMETER, "light grey")

    @staticmethod
    def pending_palindrome(cell):
        return LineRender([cell], LineRender.Style.SIMPLE, "gold3")

    @staticmethod
    def palindrome(path):
        return LineRender(path, LineRender.Style.SIMPLE, "gold2")

    @staticmethod
    def pending_renban(cell):
        return LineRender([cell], LineRender.Style.SIMPLE, "purple3")

    @staticmethod
    def renban(path):
        return LineRender(path, LineRender.Style.SIMPLE, "purple2")

    @staticmethod
    def pending_whisper(cell):
        return LineRender([cell], LineRender.Style.SIMPLE, "green3")

    @staticmethod
    def whisper(path):
        return LineRender(path, LineRender.Style.SIMPLE, "green2")


class Action(ABC):

    @abstractmethod
    def apply(self):
        pass

    @abstractmethod
    def undo(self):
        pass


class MultiAction():

    def __init__(self):
        self._actions = []

    def push(self, action):
        self._actions.append(action)

    def apply(self):
        for action in self._actions:
            action.apply()

    def undo(self):
        for action in reversed(self._actions):
            action.undo()


class ActionStack():

    def __init__(self):
        self._undo_stack = []
        self._redo_stack = []

    def push(self, action):
        self._undo_stack.append(action)

    def undo(self):
        if self._undo_stack:
            action = self._undo_stack.pop()
            self._redo_stack.append(action)
            action.undo()

    def redo(self):
        if self._redo_stack:
            action = self._redo_stack.pop()
            self._undo_stack.append(action)
            action.apply()


class DigitAction(Action):

    def __init__(self, sudoku, row, col, value):
        self._sudoku = sudoku
        self._row = row
        self._col = col
        self._from_value = sudoku.get(row, col)
        self._to_value = value

    def apply(self):
        self._sudoku.set(self._row, self._col, self._to_value)

    def undo(self):
        self._sudoku.set(self._row, self._col, self._from_value)


class ListAction(Action):

    def __init__(self, sudoku, value):
        self._sudoku = sudoku
        self._value = value

    def _lines(self):
        assert(False)

    def apply(self):
        values = self._values()
        if self._value in values:
            values.remove(self._value)
        else:
            values.append(self._value)

    def undo(self):
        self.apply()


class ThermometerAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.thermometers

class PalindromeAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.palindromes

class RenbanAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.renbans

class WhisperAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.whispers

class KropkiAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.kropkis

class XVAction(ListAction):
    def _values(self):
        return self._sudoku.constraints.xvs


class EditModeType(Enum):
    CELL = 0
    LINE = 1
    EDGE = 2

class EditMode(Enum):
    DIGIT = 0
    THERMOMETER = 1
    PALINDROME = 2
    RENBAN = 3
    GERMAN_WHISPER = 4
    WHITE_KROPKI = 5
    BLACK_KROPKI = 6
    X = 7
    V = 8

    def type(self):
        match self:
            case EditMode.DIGIT:
                return EditModeType.CELL
            case EditMode.THERMOMETER | EditMode.PALINDROME | EditMode.RENBAN | EditMode.GERMAN_WHISPER:
                return EditModeType.LINE
            case EditMode.WHITE_KROPKI | EditMode.BLACK_KROPKI | EditMode.V | EditMode.X:
                return EditModeType.EDGE
            case _:
                assert(False)


def parse_arguments():
    """
    Parses arguments of the form:
        sudoku.py <sudoku name>
    """
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("sudoku",
                            type=str)

    # Creates a dictionary of keys = argument flag, and value = argument
    args = vars(arg_parser.parse_args())
    return args['sudoku']


class SudokuUI(tk.Frame):
    """
    The Tkinter UI, responsible for drawing the board and accepting user input.
    """
    def __init__(self, parent, sudoku):
        self._sudoku = sudoku
        tk.Frame.__init__(self, parent)
        self._parent = parent
        self._selection = None
        self._pending_line = None
        self._actions = ActionStack()
        self._init_UI()

    def _make_header(self, parent, text):
        label = tk.Label(parent,
                         text=text,
                         background=HEADER_COLOR,
                         padx=5,
                         pady=5,
                         fg="black",
                         font=LABEL_FONT)
        label.pack(side=tk.TOP, fill=tk.BOTH)

    def _reload_global_constraints(self):
        self._antiknight_check.select() if self._sudoku.constraints.antiknight else self._antiknight_check.deselect()
        self._antiking_check.select() if self._sudoku.constraints.antiking else self._antiking_check.deselect()
        self._antixv_check.select() if self._sudoku.constraints.antixv else self._antixv_check.deselect()

    def _init_global_panel(self, parent, side):

        panel = tk.Frame(master=parent, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        panel.pack(side=side, pady=10)

        self._make_header(panel, "Global")

        self._antiknight = tk.BooleanVar()
        def toggle_antiknight():
            self._sudoku.constraints.antiknight = self._antiknight.get()
        self._antiknight_check = self._init_check(panel, "Antiknight", self._antiknight)
        self._antiknight_check.config(command=toggle_antiknight)
        self._antiknight_check.pack()

        self._antiking = tk.BooleanVar()
        def toggle_antiking():
            self._sudoku.constraints.antiking = self._antiking.get()
        self._antiking_check = self._init_check(panel, "Antiking", self._antiking)
        self._antiking_check.config(command=toggle_antiking)
        self._antiking_check.pack()

        self._antixv = tk.BooleanVar()
        def toggle_antixv():
            self._sudoku.constraints.antixv = self._antixv.get()
        self._antixv_check = self._init_check(panel, "AntiXV", self._antixv)
        self._antixv_check.config(command=toggle_antixv)
        self._antixv_check.pack()

        self._reload_global_constraints()


    def _init_edit_panel(self, parent, side):

        panel = tk.Frame(master=parent, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        panel.pack(side=side, pady=10)

        self._make_header(panel, "Edit Tool")

        edit_mode = tk.IntVar()
        def on_edit_mode_changed():
            self.edit_mode = EditMode(edit_mode.get())
            if self._selection is not None and self.edit_mode != EditMode.DIGIT:
                self._selection = None
                self._draw_cursor()

        for em in EditMode:
            option = tk.Radiobutton(panel,
                                    text=(em.name.title().replace('_', ' ')),
                                    variable=edit_mode,
                                    value=em.value,
                                    command=on_edit_mode_changed,
                                    background=INLAY_COLOR,
                                    highlightthickness=0,
                                    padx=5,
                                    pady=5,
                                    fg="black",
                                    font=LABEL_FONT)
            if em == EditMode.DIGIT:
                option.select()
                on_edit_mode_changed()
            option.pack(anchor=tk.W)


    def _init_check(self, parent, text, variable):
        check = tk.Checkbutton(parent,
                               text=text,
                               variable=variable,
                               onvalue=True,
                               offvalue=False,
                               background=INLAY_COLOR,
                               highlightthickness=0,
                               padx=5,
                               pady=5,
                               fg="black",
                               font=LABEL_FONT)
        check.pack(anchor=tk.W)
        return check

    def _init_config_panel(self, parent, side):

        panel = tk.Frame(master=parent, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        panel.pack(side=side, pady=10)

        self._make_header(panel, "Solver Config")

        self._trace = tk.BooleanVar()
        trace_check = self._init_check(panel, "Trace", self._trace)

        self._branch = tk.BooleanVar()
        branch_check = self._init_check(panel, "Branch", self._branch)

        self._greedy = tk.BooleanVar()
        greedy_check = self._init_check(panel, "Greedy", self._greedy)
        greedy_check.config(state=tk.DISABLED)

        self._max_depth = tk.IntVar()
        self._max_depth.set(1)

        max_depth_label = tk.Label(panel,
                                   text="Depth:",
                                   background=INLAY_COLOR,
                                   fg="black",
                                   font=LABEL_FONT,
                                   state=tk.DISABLED)
        max_depth_label.pack(side=tk.LEFT, padx=5, pady=5)

        max_depth_input = tk.OptionMenu(panel, self._max_depth, 1, 2, 3)
        max_depth_input.config(background=INLAY_COLOR,
                               highlightthickness=0,
                               fg="black",
                               font=LABEL_FONT,
                               state=tk.DISABLED)
        max_depth_input.pack(side=tk.RIGHT, padx=5, pady=5)

        def toggle_state():
            state = tk.NORMAL if self._branch.get() else tk.DISABLED
            greedy_check.config(state=state)
            max_depth_label.config(state=state)
            max_depth_input.config(state=state)

        branch_check.config(command=toggle_state)


    def _set_solve_state(self, solve_state):
        self._solve_state = solve_state
        self._solve_label.config(text=f"Solver status: {self._solve_state}")

    def _init_control_panel(self, parent, side):

        panel = tk.Frame(master=parent, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        panel.pack(side=side)

        control_panel = tk.Frame(master=panel, background=INLAY_COLOR)
        control_panel.pack(side=tk.TOP)

        info_panel = tk.Frame(master=panel, background=INLAY_COLOR)
        info_panel.pack(side=tk.BOTTOM)

        self._control_images = []
        def create_control_button(panel, name, action):
            image = tk.PhotoImage(file=f"resources/{name}.png").subsample(16, 16)
            button = tk.Button(panel,
                               image=image,
                               width=50,
                               height=50,
                               command=action,
                               background=BUTTON_COLOR)
            button.pack(side=tk.LEFT, padx=10, pady=5)
            self._control_images.append(image) # delay GC

        create_control_button(control_panel, "reset", self._reset)
        create_control_button(control_panel, "save", self._save)
        create_control_button(control_panel, "undo", self._undo)
        create_control_button(control_panel, "redo", self._redo)
        create_control_button(control_panel, "link", self._link)
        create_control_button(control_panel, "solve", self._solve)

        self._solve_label = tk.Label(info_panel,
                                     text="",
                                     width=40,
                                     justify="center",
                                     fg ="black",
                                     font=("Courier New", 10),
                                     background=INLAY_COLOR)
        self._solve_label.pack(side=tk.BOTTOM, pady=5)
        self._set_solve_state(None)


    def _init_UI(self):
        self._parent.title("Dave's Sudoku Solver")
        self._parent.configure(background=BACKGROUND_COLOR)
        self.pack()

        left_panel = tk.Frame(master=self, background=BACKGROUND_COLOR)
        left_panel.pack(side=tk.LEFT)

        right_panel = tk.Frame(master=self, background=BACKGROUND_COLOR)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH)

        edit_config_panel = tk.Frame(master=right_panel, background=BACKGROUND_COLOR)
        edit_config_panel.pack(side=tk.LEFT)

        self._canvas = tk.Canvas(left_panel,
                                 width=WIDTH,
                                 height=HEIGHT,
                                 background=BACKGROUND_COLOR,
                                 highlightthickness=0)
        self._canvas.pack(side=tk.TOP)

        self._init_global_panel(edit_config_panel, tk.TOP)
        self._init_edit_panel(edit_config_panel, tk.TOP)
        self._init_config_panel(edit_config_panel, tk.TOP)

        self._init_control_panel(left_panel, tk.BOTTOM)

        self._draw_grid()
        self._draw_sudoku()

        self._canvas.bind("<Button-1>", self._on_mouse_clicked)
        self._canvas.bind("<ButtonRelease-1>", self._on_mouse_released)
        self._canvas.bind("<Motion>", self._on_mouse_moved)
        self._parent.bind("<Key>", self._on_key_pressed)
        self._parent.bind("<Left>", lambda _: self._move_selection(0, -1))
        self._parent.bind("<Right>", lambda _: self._move_selection(0, 1))
        self._parent.bind("<Up>", lambda _: self._move_selection(-1, 0))
        self._parent.bind("<Down>", lambda _: self._move_selection(1, 0))
        self._parent.bind("<BackSpace>", self._on_backspace_pressed)

    def _draw_grid(self):
        """
        Draws grid divided with blue lines into 3x3 squares
        """
        for i in range(10):
            color = "blue" if i % 3 == 0 else "gray"

            x0 = MARGIN + i * SIDE
            y0 = MARGIN
            x1 = MARGIN + i * SIDE
            y1 = HEIGHT - MARGIN
            self._canvas.create_line(x0, y0, x1, y1, fill=color)

            x0 = MARGIN
            y0 = MARGIN + i * SIDE
            x1 = WIDTH - MARGIN
            y1 = MARGIN + i * SIDE
            self._canvas.create_line(x0, y0, x1, y1, fill=color)

    def _draw_sudoku(self):
        self._canvas.delete("numbers")
        self._canvas.delete("constraints")
        for line in self._sudoku.constraints.thermometers:
            self._draw_line(LineRender.thermometer(line.path))
        for line in self._sudoku.constraints.palindromes:
            self._draw_line(LineRender.palindrome(line.path))
        for line in self._sudoku.constraints.renbans:
            self._draw_line(LineRender.renban(line.path))
        for line in self._sudoku.constraints.whispers:
            self._draw_line(LineRender.whisper(line.path))
        for xv in self._sudoku.constraints.xvs:
            self._draw_xv(xv)
        for kropki in self._sudoku.constraints.kropkis:
            self._draw_kropki(kropki)
        for i in range(9):
            for j in range(9):
                answer = self._sudoku.get(i, j)
                if answer is not None:
                    x = MARGIN + j * SIDE + SIDE / 2
                    y = MARGIN + i * SIDE + SIDE / 2
                    self._canvas.create_text(
                        x, y, text=answer, tags="numbers", fill="black", font=("Stencil", 30)
                    )


    def _draw_cursor(self):
        self._canvas.delete("cursor")
        if self._selection is not None:
            (row, col) = self._selection
            x0 = MARGIN + col * SIDE + 1
            y0 = MARGIN + row * SIDE + 1
            x1 = MARGIN + (col + 1) * SIDE - 1
            y1 = MARGIN + (row + 1) * SIDE - 1
            self._canvas.create_rectangle(
                x0, y0, x1, y1,
                outline=CURSOR_COLOR, tags="cursor"
            )

    def _get_cell(self, event, fuzzy=False):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            #self._canvas.focus_set()

            # get row and col numbers from x,y coordinates
            (row, col) = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)
            if fuzzy:
                (ox, oy) = ((col + 0.5) * SIDE + MARGIN, (row + 0.5) * SIDE + MARGIN)
                if (ox - x)**2 + (oy - y)**2 >= (SIDE/3)**2:
                    return None
            return (row, col)
        else:
            return None

    def _get_edge(self, event):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            (r0, c0) = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)
            (ox, oy) = ((c0 + 0.5) * SIDE + MARGIN, (r0 + 0.5) * SIDE + MARGIN)
            d1 = ((event.y - oy) + (event.x - ox)) > 0
            d2 = ((event.y - oy) - (event.x - ox)) > 0
            if d1 and d2:
                (r1, c1) = (r0 + 1, c0)
            elif d1 and not d2:
                (r1, c1) = (r0, c0 + 1)
            elif d2 and not d1:
                (r1, c1) = (r0, c0 - 1)
            else:
                (r1, c1) = (r0 - 1, c0)
            if 0 <= r1 < 9 and 0 <= c1 < 9:
                return Edge((r0, c0), (r1, c1))
        return None

    def _move_selection(self, x, y):
        if not self._selection:
            return
        (r, c) = self._selection
        self._selection = ((r + x + 9) % 9, (c + y + 9) % 9)
        self._draw_cursor()

    def _on_mouse_clicked(self, event):

        if self.edit_mode.type() == EditModeType.EDGE:
            edge = self._get_edge(event)
            if not edge:
                return
            if self.edit_mode == EditMode.WHITE_KROPKI or self.edit_mode == EditMode.BLACK_KROPKI:
                color = Kropki.Color.WHITE if self.edit_mode == EditMode.WHITE_KROPKI else Kropki.Color.BLACK
                self._apply(KropkiAction(self._sudoku, Kropki(color, edge)))
            elif self.edit_mode == EditMode.V or self.edit_mode == EditMode.X:
                value = XV.Value.X if self.edit_mode == EditMode.X else XV.Value.V
                self._apply(XVAction(self._sudoku, XV(value, edge)))
        else:
            # All the rest require clicking on a specific cell
            selection = self._get_cell(event)
            if self.edit_mode.type() == EditModeType.CELL:
                # If we click outside the canvas or on an already selected cell, then clear the selection
                if selection is None or selection == self._selection:
                    self._selection = None
                else:
                    self._selection = selection
                self._draw_cursor()
            else:
                if selection is None:
                    return
                if self.edit_mode == EditMode.THERMOMETER:
                    self._pending_line = Line.pending_thermometer(selection)
                elif self.edit_mode == EditMode.PALINDROME:
                    self._pending_line = Line.pending_palindrome(selection)
                elif self.edit_mode == EditMode.RENBAN:
                    self._pending_line = Line.pending_renban(selection)
                elif self.edit_mode == EditMode.GERMAN_WHISPER:
                    self._pending_line = Line.pending_whisper(selection)
                else:
                    assert(False)

    def _on_mouse_released(self, event):
        if self._pending_line is None:
            return
        if len(self._pending_line.path) <= 1:
            self._pending_line = None
            return
        if self.edit_mode == EditMode.THERMOMETER:
            self._apply(ThermometerAction(self._sudoku, Thermometer(self._pending_line.path)))
        elif self.edit_mode == EditMode.PALINDROME:
            self._apply(PalindromeAction(self._sudoku, Palindrome(self._pending_line.path)))
        elif self.edit_mode == EditMode.RENBAN:
            self._apply(RenbanAction(self._sudoku, Renban(self._pending_line.path)))
        elif self.edit_mode == EditMode.GERMAN_WHISPER:
            self._apply(WhisperAction(self._sudoku, Whisper(self._pending_line.path)))
        else:
            assert(False)
        self._pending_line = None

    def _on_mouse_moved(self, event):
        if self._pending_line is None:
            return
        selection = self._get_cell(event, fuzzy=True)
        if selection is None:
            return
        tip = self._pending_line.path[-1]
        if selection == tip:
            return
        (r0, c0) = tip
        (r1, c1) = selection
        if abs(r1 - r0) > 1 or abs(c1 - c0) > 1:
            return
        self._pending_line.path.append(selection)
        self._draw_line(self._pending_line)

    def _draw_kropki(self, kropki):
        color = "white" if kropki.color == Kropki.Color.WHITE else "black"
        (r0, c0) = kropki.edge.cell0
        (r1, c1) = kropki.edge.cell1
        (y, x) = ((r0 + r1) * 0.5, (c0 + c1)*0.5)
        x0 = MARGIN + (x + 0.35) * SIDE + 1
        y0 = MARGIN + (y + 0.35) * SIDE + 1
        x1 = MARGIN + (x + 0.65) * SIDE - 1
        y1 = MARGIN + (y + 0.65) * SIDE - 1
        self._canvas.create_oval(
            x0, y0, x1, y1,
            fill=color, outline="black", tags="constraints"
        )

    def _draw_xv(self, xv):
        (r0, c0) = xv.edge.cell0
        (r1, c1) = xv.edge.cell1
        (r, c) = ((r0 + r1) * 0.5, (c0 + c1)*0.5)
        x = MARGIN + c * SIDE + SIDE / 2
        y = MARGIN + r * SIDE + SIDE / 2
        self._canvas.create_text(
            x, y, text=xv.value.name, tags="constraints", fill="black", font=("Stencil", 15)
        )

    def _draw_line(self, line):
        if line.style == LineRender.Style.THERMOMETER:
            last_row, last_col = None, None
            for (row, col) in line.path:
                if last_row is None:
                    x0 = MARGIN + (col + 0.05) * SIDE + 1
                    y0 = MARGIN + (row + 0.05) * SIDE + 1
                    x1 = MARGIN + (col + 0.95) * SIDE - 1
                    y1 = MARGIN + (row + 0.95) * SIDE - 1
                    self._canvas.create_oval(
                        x0, y0, x1, y1,
                        fill=line.color, outline="", tags="constraints"
                    )
                else:
                    x0 = MARGIN + (last_col + 0.5) * SIDE + 1
                    y0 = MARGIN + (last_row + 0.5) * SIDE + 1
                    x1 = MARGIN + (     col + 0.5) * SIDE + 1
                    y1 = MARGIN + (     row + 0.5) * SIDE + 1
                    self._canvas.create_line(
                        x0, y0, x1, y1,
                        fill=line.color, width=20, capstyle=tk.ROUND, tags="constraints"
                    )
                last_row, last_col = row, col
        elif line.style == LineRender.Style.SIMPLE:
            last_row, last_col = None, None
            for (row, col) in line.path:
                if last_row is not None:
                    x0 = MARGIN + (last_col + 0.5) * SIDE + 1
                    y0 = MARGIN + (last_row + 0.5) * SIDE + 1
                    x1 = MARGIN + (     col + 0.5) * SIDE + 1
                    y1 = MARGIN + (     row + 0.5) * SIDE + 1
                    self._canvas.create_line(
                        x0, y0, x1, y1,
                        fill=line.color, width=15, capstyle=tk.ROUND, tags="constraints"
                    )
                last_row, last_col = row, col
        else:
            assert(False)

    def _on_key_pressed(self, event):
        if self._selection is None:
            return
        if event.char == '' or event.char not in "123456789":
            return
        if self.edit_mode is not EditMode.DIGIT:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, int(event.char)))
        self._draw_sudoku()

    def _on_backspace_pressed(self, event):
        if self._selection is None:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, None))
        self._draw_sudoku()

    def _apply(self, action, solve_state=None):
        action.apply()
        self._set_solve_state(solve_state)
        self._actions.push(action)
        self._draw_sudoku()

    def _reset(self):
        self._sudoku.reset()
        self._set_solve_state(None)
        self._draw_sudoku()
        self._reload_global_constraints()

    def _solve(self):
        (solve_state, board, breadcrumbs) = self._sudoku.solve(
            branch=self._branch.get(),
            greedy=self._greedy.get(),
            max_depth=self._max_depth.get(),
            trace=self._trace.get())

        if breadcrumbs:
            popup = tk.Toplevel(self._parent)
            popup.geometry(f"{REPORT_WIDTH}x{REPORT_HEIGHT}")
            popup.title("Solver Report")
            popup_text = scrolledtext.ScrolledText(popup, font=LABEL_FONT, width=REPORT_WIDTH, height=REPORT_HEIGHT)
            lines = breadcrumbs.count("\n")
            popup_text.insert(tk.INSERT, f"solver returned {lines} lines\n")
            popup_text.insert(tk.INSERT, breadcrumbs)
            popup_text.configure(state="disabled")
            popup_text.pack(fill=tk.BOTH)

        if board is None:
            self._set_solve_state(solve_state)
            return
        action = MultiAction()
        for r, row in enumerate(board):
            for c, digit in enumerate(row):
                action.push(DigitAction(self._sudoku, r, c, digit))
        self._apply(action, solve_state)

    def _save(self):
        self._sudoku.save()

    def _undo(self):
        self._actions.undo()
        self._set_solve_state(None)
        self._draw_sudoku()

    def _redo(self):
        self._actions.redo()
        self._set_solve_state(None)
        self._draw_sudoku()

    def _link(self):
        pyperclip.copy(self._sudoku.to_url())


if __name__ == '__main__':
    sudoku_name = parse_arguments()
    sudoku = Sudoku(sudoku_name)

    root = tk.Tk()
    SudokuUI(root, sudoku)
    root.geometry("%dx%d" % (WIDTH + 200, HEIGHT + 110))
    #root.resizable(False, False)
    root.mainloop()
