#!/usr/bin/env python3

import argparse

from abc import ABC, abstractmethod
from enum import Enum
import tkinter as tk
from sudoku import *

MARGIN = 20  # Pixels around the board
SIDE = 80  # Width of every board cell.
WIDTH = HEIGHT = MARGIN * 2 + SIDE * 9  # Width and height of the whole board


BACKGROUND_COLOR = "white smoke"
INLAY_COLOR = "linen"
BORDER_COLOR = "black"
BUTTON_COLOR = "white"
THERMO_COLOR = "light grey"
THERMO_PENDING_COLOR = "dark grey"
CURSOR_COLOR = "red"


class Action(ABC):

    @abstractmethod
    def apply(self):
        pass

    @abstractmethod
    def undo(self):
        pass


class MultiAction():

    def __init__(self):
        self._actions = []

    def push(self, action):
        self._actions.append(action)

    def apply(self):
        for action in self._actions:
            action.apply()

    def undo(self):
        for action in reversed(self._actions):
            action.undo()


class ActionStack():

    def __init__(self):
        self._undo_stack = []
        self._redo_stack = []

    def push(self, action):
        self._undo_stack.append(action)

    def undo(self):
        if self._undo_stack:
            action = self._undo_stack.pop()
            self._redo_stack.append(action)
            action.undo()

    def redo(self):
        if self._redo_stack:
            action = self._redo_stack.pop()
            self._undo_stack.append(action)
            action.apply()


class DigitAction(Action):

    def __init__(self, sudoku, row, col, value):
        self._sudoku = sudoku
        self._row = row
        self._col = col
        self._from_value = sudoku.get(row, col)
        self._to_value = value

    def apply(self):
        self._sudoku.set(self._row, self._col, self._to_value)

    def undo(self):
        self._sudoku.set(self._row, self._col, self._from_value)


class ThermometerAction(Action):

    def __init__(self, sudoku, thermo):
        self._sudoku = sudoku
        self._thermo = thermo

    def apply(self):
        thermos = self._sudoku.constraints.thermometers
        if self._thermo in thermos:
            thermos.remove(self._thermo)
        else:
            thermos.append(self._thermo)

    def undo(self):
        self.apply()


class EditMode(Enum):
    DIGIT = 0
    THERMOMETER = 1

def parse_arguments():
    """
    Parses arguments of the form:
        sudoku.py <sudoku name>
    """
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("sudoku",
                            type=str)

    # Creates a dictionary of keys = argument flag, and value = argument
    args = vars(arg_parser.parse_args())
    return args['sudoku']


class SudokuUI(tk.Frame):
    """
    The Tkinter UI, responsible for drawing the board and accepting user input.
    """
    def __init__(self, parent, sudoku):
        self._sudoku = sudoku
        tk.Frame.__init__(self, parent)
        self._parent = parent
        self._selection = None
        self._thermo = None
        self._actions = ActionStack()
        self._initUI()

    def _set_solve_state(self, solve_state):
        self._solve_state = solve_state
        self._solve_label.config(text=f"Solver status: {self._solve_state}")

    def _create_control_button(self, panel, name, action):
        image = tk.PhotoImage(file=f"resources/{name}.png").subsample(16, 16)
        button = tk.Button(panel,
                           image=image,
                           width=50,
                           height=50,
                           command=action,
                           background=BUTTON_COLOR)
        button.pack(side=tk.LEFT, padx=10, pady=5)
        self._control_images.append(image) # delay GC

    def _initUI(self):
        self._parent.title("Dave's Sudoku Solver")
        self._parent.configure(background=BACKGROUND_COLOR)
        self.pack()

        left_panel = tk.Frame(master=self, background=BACKGROUND_COLOR)
        left_panel.pack(side=tk.LEFT)

        right_panel = tk.Frame(master=self, background=BACKGROUND_COLOR)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH)

        edit_panel = tk.Frame(master=right_panel, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        edit_panel.pack(side=tk.LEFT)

        self._canvas = tk.Canvas(left_panel,
                                 width=WIDTH,
                                 height=HEIGHT,
                                 background=BACKGROUND_COLOR,
                                 highlightthickness=0)
        self._canvas.pack(side=tk.TOP)

        bottom_panel = tk.Frame(master=left_panel, background=INLAY_COLOR, highlightthickness=1, highlightbackground=BORDER_COLOR)
        bottom_panel.pack(side=tk.BOTTOM)

        control_panel = tk.Frame(master=bottom_panel, background=INLAY_COLOR)
        control_panel.pack(side=tk.TOP)

        info_panel = tk.Frame(master=bottom_panel, background=INLAY_COLOR)
        info_panel.pack(side=tk.BOTTOM)

        # Edit panel
        edit_mode = tk.IntVar()
        def on_edit_mode_changed():
            self.edit_mode = EditMode(edit_mode.get())
            if self._selection is not None and self.edit_mode != EditMode.DIGIT:
                self._selection = None
                self._draw_cursor()

        for em in EditMode:
            option = tk.Radiobutton(edit_panel,
                                    text=(em.name.title()),
                                    variable=edit_mode,
                                    value=em.value,
                                    command=on_edit_mode_changed,
                                    background=INLAY_COLOR,
                                    highlightthickness=0,
                                    padx=5,
                                    pady=5,
                                    fg="black",
                                    font=("Courier New", 10))
            if em == EditMode.DIGIT:
                option.select()
                on_edit_mode_changed()
            option.pack(anchor=tk.W)


        # Control panel
        self._control_images = []
        self._create_control_button(control_panel, "reset", self._reset)
        self._create_control_button(control_panel, "save", self._save)
        self._create_control_button(control_panel, "undo", self._undo)
        self._create_control_button(control_panel, "redo", self._redo)
        self._create_control_button(control_panel, "solve", self._solve)

        self._solve_label = tk.Label(info_panel,
                                     text="",
                                     width=30,
                                     justify="center",
                                     fg ="black",
                                     font=("Courier New", 10),
                                     background=INLAY_COLOR)
        self._solve_label.pack(side=tk.BOTTOM, pady=5)
        self._set_solve_state(None)

        self._draw_grid()
        self._draw_sudoku()

        self._canvas.bind("<Button-1>", self._on_mouse_clicked)
        self._canvas.bind("<ButtonRelease-1>", self._on_mouse_released)
        self._canvas.bind("<Motion>", self._on_mouse_moved)
        self._parent.bind("<Key>", self._on_key_pressed)
        self._parent.bind("<BackSpace>", self._on_backspace_pressed)

    def _draw_grid(self):
        """
        Draws grid divided with blue lines into 3x3 squares
        """
        for i in range(10):
            color = "blue" if i % 3 == 0 else "gray"

            x0 = MARGIN + i * SIDE
            y0 = MARGIN
            x1 = MARGIN + i * SIDE
            y1 = HEIGHT - MARGIN
            self._canvas.create_line(x0, y0, x1, y1, fill=color)

            x0 = MARGIN
            y0 = MARGIN + i * SIDE
            x1 = WIDTH - MARGIN
            y1 = MARGIN + i * SIDE
            self._canvas.create_line(x0, y0, x1, y1, fill=color)

    def _draw_sudoku(self):
        self._canvas.delete("numbers")
        self._canvas.delete("constraints")
        for thermo in self._sudoku.constraints.thermometers:
            self._draw_thermo(thermo.path, pending=False)
        for i in range(9):
            for j in range(9):
                answer = self._sudoku.get(i, j)
                if answer is not None:
                    x = MARGIN + j * SIDE + SIDE / 2
                    y = MARGIN + i * SIDE + SIDE / 2
                    self._canvas.create_text(
                        x, y, text=answer, tags="numbers", fill="black", font=("Stencil", 30)
                    )


    def _draw_cursor(self):
        self._canvas.delete("cursor")
        if self._selection is not None:
            (row, col) = self._selection
            x0 = MARGIN + col * SIDE + 1
            y0 = MARGIN + row * SIDE + 1
            x1 = MARGIN + (col + 1) * SIDE - 1
            y1 = MARGIN + (row + 1) * SIDE - 1
            self._canvas.create_rectangle(
                x0, y0, x1, y1,
                outline=CURSOR_COLOR, tags="cursor"
            )

    def _get_cell(self, event, fuzzy=False):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            #self._canvas.focus_set()

            # get row and col numbers from x,y coordinates
            (row, col) = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)
            if fuzzy:
                (ox, oy) = ((col + 0.5) * SIDE + MARGIN, (row + 0.5) * SIDE + MARGIN)
                if (ox - x)**2 + (oy - y)**2 >= (SIDE/2)**2:
                    return None
            return (row, col)
        else:
            return None

    def _on_mouse_clicked(self, event):
        selection = self._get_cell(event)
        if selection is not None:
            if self.edit_mode == EditMode.DIGIT:
                # if cell was selected already - deselect it
                if selection == self._selection:
                    self._selection = None
                else:
                    self._selection = selection
            elif self.edit_mode == EditMode.THERMOMETER:
                self._thermo = [selection]
        else:
            self._selection = None

        self._draw_cursor()

    def _on_mouse_released(self, event):
        if self._thermo is None:
            return
        self._apply(ThermometerAction(self._sudoku, Thermometer(self._thermo)))
        self._thermo = None

    def _on_mouse_moved(self, event):
        if self._thermo is None:
            return
        selection = self._get_cell(event, fuzzy=True)
        if selection is not None:
            if selection != self._thermo[-1]:
                self._thermo.append(selection)
                self._draw_thermo(self._thermo, pending=True)

    def _draw_thermo(self, path, pending):
        color = THERMO_PENDING_COLOR if pending else THERMO_COLOR
        last_row, last_col = None, None
        for (row, col) in path:
            if last_row is None:
                x0 = MARGIN + (col + 0.05) * SIDE + 1
                y0 = MARGIN + (row + 0.05) * SIDE + 1
                x1 = MARGIN + (col + 0.95) * SIDE - 1
                y1 = MARGIN + (row + 0.95) * SIDE - 1
                self._canvas.create_oval(
                    x0, y0, x1, y1,
                    fill=color, outline="", tags="constraints"
                )
            else:
                x0 = MARGIN + (last_col + 0.5) * SIDE + 1
                y0 = MARGIN + (last_row + 0.5) * SIDE + 1
                x1 = MARGIN + (     col + 0.5) * SIDE + 1
                y1 = MARGIN + (     row + 0.5) * SIDE + 1
                self._canvas.create_line(
                    x0, y0, x1, y1,
                    fill=color, width=20, capstyle=tk.ROUND, tags="constraints"
                )
            last_row, last_col = row, col

    def _on_key_pressed(self, event):
        if self._selection is None:
            return
        if event.char not in "123456789":
            return
        if self.edit_mode is not EditMode.DIGIT:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, int(event.char)))
        self._selection = None
        self._draw_sudoku()
        self._draw_cursor()

    def _on_backspace_pressed(self, event):
        if self._selection is None:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, None))
        self._selection = None
        self._draw_sudoku()
        self._draw_cursor()

    def _apply(self, action, solve_state=None):
        action.apply()
        self._set_solve_state(solve_state)
        self._actions.push(action)
        self._draw_sudoku()

    def _reset(self):
        self._sudoku.reset()
        self._set_solve_state(None)
        self._draw_sudoku()

    def _solve(self):
        (solve_state, board, breadcrumbs) = self._sudoku.solve()
        # TODO show this in the GUI...
        # print(breadcrumbs)
        action = MultiAction()
        for r, row in enumerate(board):
            for c, digit in enumerate(row):
                action.push(DigitAction(self._sudoku, r, c, digit))
        self._apply(action, solve_state)

    def _save(self):
        self._sudoku.save()

    def _undo(self):
        self._actions.undo()
        self._set_solve_state(None)
        self._draw_sudoku()

    def _redo(self):
        self._actions.redo()
        self._set_solve_state(None)
        self._draw_sudoku()


if __name__ == '__main__':
    sudoku_name = parse_arguments()
    sudoku = Sudoku(sudoku_name)

    root = tk.Tk()
    SudokuUI(root, sudoku)
    root.geometry("%dx%d" % (WIDTH + 180, HEIGHT + 110))
    #root.resizable(False, False)
    root.mainloop()
