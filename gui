#!/usr/bin/env python3

import argparse

from abc import ABC, abstractmethod
from enum import Enum
import tkinter as tk
from sudoku import *

MARGIN = 20  # Pixels around the board
SIDE = 80  # Width of every board cell.
WIDTH = HEIGHT = MARGIN * 2 + SIDE * 9  # Width and height of the whole board

class Action(ABC):

    @abstractmethod
    def apply(self):
        pass

    @abstractmethod
    def undo(self):
        pass


class ActionStack():

    def __init__(self):
        self._undo_stack = []
        self._redo_stack = []

    def push(self, action):
        self._undo_stack.append(action)

    def undo(self):
        if self._undo_stack:
            action = self._undo_stack.pop()
            self._redo_stack.append(action)
            action.undo()

    def redo(self):
        if self._redo_stack:
            action = self._redo_stack.pop()
            self._undo_stack.append(action)
            action.apply()


class DigitAction(Action):

    def __init__(self, sudoku, row, col, value):
        self._sudoku = sudoku
        self._row = row
        self._col = col
        self._from_value = sudoku.get(row, col)
        self._to_value = value

    def apply(self):
        self._sudoku.set(self._row, self._col, self._to_value)

    def undo(self):
        self._sudoku.set(self._row, self._col, self._from_value)



class EditMode(Enum):
    DIGIT = 0
    THERMO = 1

def parse_arguments():
    """
    Parses arguments of the form:
        sudoku.py <sudoku name>
    """
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("sudoku",
                            type=str)

    # Creates a dictionary of keys = argument flag, and value = argument
    args = vars(arg_parser.parse_args())
    return args['sudoku']


class SudokuUI(tk.Frame):
    """
    The Tkinter UI, responsible for drawing the board and accepting user input.
    """
    def __init__(self, parent, sudoku):
        self._sudoku = sudoku
        tk.Frame.__init__(self, parent)
        self._parent = parent
        self._selection = None
        self._actions = ActionStack()
        self._initUI()

    def _apply(self, action):
        action.apply()
        self._actions.push(action)

    def _create_control_button(self, panel, name, action):
        image = tk.PhotoImage(file=f"resources/{name}.png").subsample(16, 16)
        button = tk.Button(panel,
                           image=image,
                           width=50,
                           height=50,
                           command=action)
        button.pack(side=tk.LEFT, padx=10)
        self._control_images.append(image) # delay GC

    def _initUI(self):
        self._parent.title("Dave's Sudoku Solver")
        self.pack()

        left = tk.Frame(master=self)
        left.pack(side=tk.LEFT, fill=tk.NONE)

        right = tk.Frame(master=self)
        right.pack(side=tk.RIGHT, fill=tk.X)

        self.canvas = tk.Canvas(left,
                                width=WIDTH,
                                height=HEIGHT)
        self.canvas.pack(side=tk.TOP, fill=tk.NONE)

        control_panel = tk.Frame(master=left)
        control_panel.pack(side=tk.BOTTOM, fill=tk.NONE)

        info_panel = tk.Frame(master=control_panel)
        info_panel.pack(side=tk.BOTTOM, fill=tk.NONE)

        # Edit panel
        edit_mode = tk.IntVar()
        def on_edit_mode_changed():
            self.edit_mode = EditMode(edit_mode.get())
            if self._selection is not None and self.edit_mode != EditMode.DIGIT:
                self._selection = None
                self._draw_cursor()

        for em in EditMode:
            option = tk.Radiobutton(right,
                                    text=(em.name.title()),
                                    variable=edit_mode,
                                    value=em.value,
                                    command=on_edit_mode_changed)
            if em == EditMode.DIGIT:
                option.select()
                on_edit_mode_changed()
            option.pack(anchor=tk.W)


        # Control panel
        self._control_images = []
        self._create_control_button(control_panel, "reset", self._reset)
        self._create_control_button(control_panel, "save", self._save)
        self._create_control_button(control_panel, "undo", self._undo)
        self._create_control_button(control_panel, "redo", self._redo)
        self._create_control_button(control_panel, "solve", self._solve)

        solve_label = tk.Label(info_panel,
                               text="",
                               width=20)
        solve_label.pack(side=tk.BOTTOM, pady=10)

        def on_solve_state_updated():
            solve_label.config(text=f"Solver status: {self._sudoku.solve_state.title()}")
        self._sudoku.on_solve_state_updated = on_solve_state_updated
        on_solve_state_updated()


        self._draw_grid()
        self._draw_sudoku()

        self.canvas.bind("<Button-1>", self._cell_left_clicked)
        self.canvas.bind("<Button-3>", self._cell_right_clicked)
        self.canvas.bind("<Key>", self._key_pressed)
        self.canvas.bind("<BackSpace>", self._backspace_pressed)

    def _draw_grid(self):
        """
        Draws grid divided with blue lines into 3x3 squares
        """
        for i in range(10):
            color = "blue" if i % 3 == 0 else "gray"

            x0 = MARGIN + i * SIDE
            y0 = MARGIN
            x1 = MARGIN + i * SIDE
            y1 = HEIGHT - MARGIN
            self.canvas.create_line(x0, y0, x1, y1, fill=color)

            x0 = MARGIN
            y0 = MARGIN + i * SIDE
            x1 = WIDTH - MARGIN
            y1 = MARGIN + i * SIDE
            self.canvas.create_line(x0, y0, x1, y1, fill=color)

    def _draw_sudoku(self):
        self.canvas.delete("numbers")
        for i in range(9):
            for j in range(9):
                answer = self._sudoku.get(i, j)
                if answer is not None:
                    x = MARGIN + j * SIDE + SIDE / 2
                    y = MARGIN + i * SIDE + SIDE / 2
                    self.canvas.create_text(
                        x, y, text=answer, tags="numbers", fill="black", font=("Stencil", 30)
                    )

    def _draw_cursor(self):
        self.canvas.delete("cursor")
        if self._selection is not None:
            (row, col) = self._selection
            x0 = MARGIN + col * SIDE + 1
            y0 = MARGIN + row * SIDE + 1
            x1 = MARGIN + (col + 1) * SIDE - 1
            y1 = MARGIN + (row + 1) * SIDE - 1
            self.canvas.create_rectangle(
                x0, y0, x1, y1,
                outline="red", tags="cursor"
            )

    def _cell_left_clicked(self, event):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            self.canvas.focus_set()

            # get row and col numbers from x,y coordinates
            selection = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)

            if self.edit_mode == EditMode.DIGIT:
                # if cell was selected already - deselect it
                if selection == self._selection:
                    self._selection = None
                else:
                    self._selection = selection
            else:
                print("TODO L")
        else:
            self._selection = None

        self._draw_cursor()

    def _cell_right_clicked(self, event):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            self.canvas.focus_set()

            # get row and col numbers from x,y coordinates
            selection = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)

            if self.edit_mode == EditMode.THERMO:
                print("TODO R")

    def _key_pressed(self, event):
        if self._selection is None:
            return
        if event.char not in "123456789":
            return
        if self.edit_mode is not EditMode.DIGIT:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, int(event.char)))
        self._selection = None
        self._draw_sudoku()
        self._draw_cursor()

    def _backspace_pressed(self, event):
        if self._selection is None:
            return
        (row, col) = self._selection
        self._apply(DigitAction(self._sudoku, row, col, None))
        self._selection = None
        self._draw_sudoku()
        self._draw_cursor()

    def _reset(self):
        self._sudoku.reset()
        self._draw_sudoku()

    def _solve(self):
        self._sudoku.solve()
        self._draw_sudoku()

    def _save(self):
        self._sudoku.save()

    def _undo(self):
        self._actions.undo()
        self._draw_sudoku()

    def _redo(self):
        self._actions.redo()
        self._draw_sudoku()


if __name__ == '__main__':
    sudoku_name = parse_arguments()
    sudoku_filename = f"sudokus/{sudoku_name}.sudoku"
    sudoku = Sudoku(sudoku_filename)

    root = tk.Tk()
    SudokuUI(root, sudoku)
    root.geometry("%dx%d" % (WIDTH + 140, HEIGHT + 100))
    root.resizable(False, False)
    root.mainloop()
