#!/usr/bin/env python3

import argparse

import tkinter as tk
from sudoku import *

MARGIN = 20  # Pixels around the board
SIDE = 80  # Width of every board cell.
WIDTH = HEIGHT = MARGIN * 2 + SIDE * 9  # Width and height of the whole board


def parse_arguments():
    """
    Parses arguments of the form:
        sudoku.py <sudoku name>
    """
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("sudoku",
                            type=str)

    # Creates a dictionary of keys = argument flag, and value = argument
    args = vars(arg_parser.parse_args())
    return args['sudoku']


class SudokuUI(tk.Frame):
    """
    The Tkinter UI, responsible for drawing the board and accepting user input.
    """
    def __init__(self, parent, sudoku):
        self.sudoku = sudoku
        tk.Frame.__init__(self, parent)
        self.parent = parent
        self.selection = None

        self.__initUI()

    def __initUI(self):
        self.parent.title("Dave's Sudoku Solver")
        self.pack()

        left = tk.Frame(master=self)
        left.pack(side=tk.LEFT, fill=tk.NONE)

        right = tk.Frame(master=self)
        right.pack(side=tk.RIGHT, fill=tk.X)

        self.canvas = tk.Canvas(left,
                                width=WIDTH,
                                height=HEIGHT)
        self.canvas.pack(side=tk.TOP, fill=tk.NONE)

        bottom = tk.Frame(master=left)
        bottom.pack(side=tk.BOTTOM, fill=tk.NONE)

        # Edit panel
        #edit_mode = tk.Radiobutton(right,
        #               text="")


        # Control panel
        reset_button = tk.Button(bottom,
                                 text="Reset",
                                 width=20,
                                 command=self.__reset)
        reset_button.pack(side=tk.LEFT, fill=tk.BOTH, padx=10)

        save_button = tk.Button(bottom,
                                text="Save",
                                width=20,
                                command=self.__save)
        save_button.pack(side=tk.RIGHT, fill=tk.BOTH, padx=10)

        solve_button = tk.Button(bottom,
                                 text="",
                                 width=20,
                                command=self.__solve)
        solve_button.pack(side=tk.LEFT, fill=tk.BOTH, padx=10)


        def on_solve_state_updated():
            solve_button.config(text=f"Solve ({self.sudoku.solve_state})")
        self.sudoku.on_solve_state_updated = on_solve_state_updated
        on_solve_state_updated()


        self.__draw_grid()
        self.__draw_sudoku()

        self.canvas.bind("<Button-1>", self.__cell_clicked)
        self.canvas.bind("<Key>", self.__key_pressed)
        self.canvas.bind("<BackSpace>", self.__backspace_pressed)

    def __draw_grid(self):
        """
        Draws grid divided with blue lines into 3x3 squares
        """
        for i in range(10):
            color = "blue" if i % 3 == 0 else "gray"

            x0 = MARGIN + i * SIDE
            y0 = MARGIN
            x1 = MARGIN + i * SIDE
            y1 = HEIGHT - MARGIN
            self.canvas.create_line(x0, y0, x1, y1, fill=color)

            x0 = MARGIN
            y0 = MARGIN + i * SIDE
            x1 = WIDTH - MARGIN
            y1 = MARGIN + i * SIDE
            self.canvas.create_line(x0, y0, x1, y1, fill=color)

    def __draw_sudoku(self):
        self.canvas.delete("numbers")
        for i in range(9):
            for j in range(9):
                answer = self.sudoku.get(i, j)
                if answer is not None:
                    x = MARGIN + j * SIDE + SIDE / 2
                    y = MARGIN + i * SIDE + SIDE / 2
                    self.canvas.create_text(
                        x, y, text=answer, tags="numbers", fill="black", font=("Stencil", 30)
                    )

    def __draw_cursor(self):
        self.canvas.delete("cursor")
        if self.selection is not None:
            (row, col) = self.selection
            x0 = MARGIN + col * SIDE + 1
            y0 = MARGIN + row * SIDE + 1
            x1 = MARGIN + (col + 1) * SIDE - 1
            y1 = MARGIN + (row + 1) * SIDE - 1
            self.canvas.create_rectangle(
                x0, y0, x1, y1,
                outline="red", tags="cursor"
            )

    def __cell_clicked(self, event):
        x, y = event.x, event.y
        if (MARGIN < x < WIDTH - MARGIN and MARGIN < y < HEIGHT - MARGIN):
            self.canvas.focus_set()

            # get row and col numbers from x,y coordinates
            selection = ((y - MARGIN) // SIDE, (x - MARGIN) // SIDE)

            # if cell was selected already - deselect it
            if selection == self.selection:
                self.selection = None
            else:
                self.selection = selection
        else:
            self.selection = None

        self.__draw_cursor()

    def __key_pressed(self, event):
        if self.selection is None:
            return
        if event.char not in "123456789":
            return
        (row, col) = self.selection
        self.sudoku.set(row, col, int(event.char))
        self.selection = None
        self.__draw_sudoku()
        self.__draw_cursor()

    def __backspace_pressed(self, event):
        if self.selection is None:
            return
        (row, col) = self.selection
        self.sudoku.set(row, col, None)
        self.selection = None
        self.__draw_sudoku()
        self.__draw_cursor()

    def __reset(self):
        self.sudoku.reset()
        self.__draw_sudoku()

    def __solve(self):
        self.sudoku.solve()
        self.__draw_sudoku()

    def __save(self):
        self.sudoku.save()


if __name__ == '__main__':
    sudoku_name = parse_arguments()
    sudoku_filename = f"sudokus/{sudoku_name}.sudoku"
    sudoku = Sudoku(sudoku_filename)

    root = tk.Tk()
    SudokuUI(root, sudoku)
    root.geometry("%dx%d" % (WIDTH + 120, HEIGHT + 50))
    root.resizable(False, False)
    root.mainloop()
